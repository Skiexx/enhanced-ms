{"version":3,"sources":["../src/measurements.ts","../src/locales/de.ts","../src/locales/en.ts","../src/locales/mi.ts","../src/locales/ru.ts","../src/languages.ts","../src/format.ts","../src/parse.ts","../src/index.ts"],"names":["options"],"mappings":"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","sourcesContent":["export const measurements = {\r\n  ns: 0.000_001,\r\n  us: 0.001,\r\n  ms: 1,\r\n  s: 1_000,\r\n  m: 60_000,\r\n  h: 3_600_000,\r\n  d: 86_400_000,\r\n  w: 604_800_000,\r\n  mo: 2_628_000_000, // 28 days\r\n  y: 31_536_000_000, // 365 days\r\n  dec: 315_360_000_000, // 10 years\r\n  c: 3_153_600_000_000, // 100 years\r\n  kyr: 31_536_000_000_000, // 1000 years\r\n};\r\n\r\nexport type MeasurementKey = keyof typeof measurements;\r\n\r\nexport function isMeasurementKey(value: unknown): value is MeasurementKey {\r\n  return typeof value === 'string' && value in measurements;\r\n}\r\n","import type { Language } from '../languages';\r\n\r\nexport default {\r\n  decimal: ',',\r\n  and: 'und',\r\n\r\n  units: [\r\n    {\r\n      key: 'ns',\r\n      name: (c) => (c === 1 ? 'Nanosekunde' : 'Nanosekunden'),\r\n      matches: ['ns', 'nanos', 'nanosekunde', 'nanosekunden'],\r\n    },\r\n    {\r\n      key: 'us',\r\n      name: (c) => (c === 1 ? 'Mikrosekunde' : 'Mikrosekunden'),\r\n      matches: ['us', 'mk', 'mikrosekunde', 'mikrosekunden', 'mikros'],\r\n    },\r\n    {\r\n      key: 'ms',\r\n      name: (c) => (c === 1 ? 'Millisekunde' : 'Millisekunden'),\r\n      matches: ['ms', 'ml', 'mi', 'millisekunde', 'millisekunden', 'millis'],\r\n    },\r\n    {\r\n      key: 's',\r\n      name: (c) => (c === 1 ? 'Sekunde' : 'Sekunden'),\r\n      matches: ['s', 'sekunde', 'sekunden', 'sek', 'seks'],\r\n    },\r\n    {\r\n      key: 'm',\r\n      name: (c) => (c === 1 ? 'Minute' : 'Minuten'),\r\n      matches: ['m', 'minute', 'minuten', 'min', 'mins'],\r\n    },\r\n    {\r\n      key: 'h',\r\n      name: (c) => (c === 1 ? 'Stunde' : 'Stunden'),\r\n      matches: ['h', 'stunde', 'stunden', 'st'],\r\n    },\r\n    {\r\n      key: 'd',\r\n      name: (c) => (c === 1 ? 'Tag' : 'Tage'),\r\n      matches: ['d', 't', 'tag', 'tage'],\r\n    },\r\n    {\r\n      key: 'w',\r\n      name: (c) => (c === 1 ? 'Woche' : 'Wochen'),\r\n      matches: ['w', 'wo', 'woche', 'wochen'],\r\n    },\r\n    {\r\n      key: 'mo',\r\n      name: (c) => (c === 1 ? 'Monat' : 'Monate'),\r\n      matches: ['mo', 'monat', 'monate'],\r\n    },\r\n    {\r\n      key: 'y',\r\n      name: (c) => (c === 1 ? 'Jahr' : 'Jahre'),\r\n      matches: ['y', 'a', 'j', 'jahr', 'jahre'],\r\n    },\r\n    {\r\n      key: 'dec',\r\n      name: (c) => (c === 1 ? 'Jahrzehnt' : 'Jahrzehnte'),\r\n      abbreviation: 'Jz.',\r\n      matches: ['jz', 'jahrzehnt', 'jahrzehnte'],\r\n    },\r\n    {\r\n      key: 'c',\r\n      name: (c) => (c === 1 ? 'Jahrhundert' : 'Jahrhunderte'),\r\n      abbreviation: 'Jh.',\r\n      matches: ['c', 'jh', 'jhd', 'jahrhundert', 'jahrhunderte'],\r\n    },\r\n    {\r\n      key: 'kyr',\r\n      name: (c) => (c === 1 ? 'Jahrtausend' : 'Jahrtausende'),\r\n      abbreviation: 'Jt.',\r\n      matches: ['jt', 'jtd', 'jtsd', 'jahrt', 'jahrtausend', 'jahrtausende'],\r\n    },\r\n  ],\r\n} as Language;\r\n","import type { Language } from '../languages';\r\n\r\nexport default {\r\n  decimal: '.',\r\n  and: 'and',\r\n\r\n  units: [\r\n    {\r\n      key: 'ns',\r\n      name: (c) => (c === 1 ? 'nanosecond' : 'nanoseconds'),\r\n      abbreviation: 'ns',\r\n      matches: ['ns', 'nanosecond', 'nanoseconds'],\r\n    },\r\n    {\r\n      key: 'us',\r\n      name: (c) => (c === 1 ? 'microsecond' : 'microseconds'),\r\n      abbreviation: 'µs',\r\n      matches: ['µs', 'us', 'microsecond', 'microseconds'],\r\n    },\r\n    {\r\n      key: 'ms',\r\n      name: (c) => (c === 1 ? 'millisecond' : 'milliseconds'),\r\n      abbreviation: 'ms',\r\n      matches: ['ms', 'millisecond', 'milliseconds', 'msec', 'msecs'],\r\n    },\r\n    {\r\n      key: 's',\r\n      name: (c) => (c === 1 ? 'second' : 'seconds'),\r\n      abbreviation: 's',\r\n      matches: ['s', 'second', 'seconds', 'sec', 'secs'],\r\n    },\r\n    {\r\n      key: 'm',\r\n      name: (c) => (c === 1 ? 'minute' : 'minutes'),\r\n      abbreviation: 'm',\r\n      matches: ['m', 'minute', 'minutes', 'min', 'mins'],\r\n    },\r\n    {\r\n      key: 'h',\r\n      name: (c) => (c === 1 ? 'hour' : 'hours'),\r\n      abbreviation: 'h',\r\n      matches: ['h', 'hour', 'hours', 'hr', 'hrs'],\r\n    },\r\n    {\r\n      key: 'd',\r\n      name: (c) => (c === 1 ? 'day' : 'days'),\r\n      abbreviation: 'd',\r\n      matches: ['d', 'day', 'days'],\r\n    },\r\n    {\r\n      key: 'w',\r\n      name: (c) => (c === 1 ? 'week' : 'weeks'),\r\n      abbreviation: 'w',\r\n      matches: ['w', 'week', 'weeks', 'wk', 'wks'],\r\n    },\r\n    {\r\n      key: 'mo',\r\n      name: (c) => (c === 1 ? 'month' : 'months'),\r\n      abbreviation: 'mo',\r\n      matches: ['mo', 'month', 'months', 'mth', 'mths', 'mnth', 'mnths'],\r\n    },\r\n    {\r\n      key: 'y',\r\n      name: (c) => (c === 1 ? 'year' : 'years'),\r\n      abbreviation: 'y',\r\n      matches: ['y', 'year', 'years', 'yr', 'yrs'],\r\n    },\r\n    {\r\n      key: 'dec',\r\n      name: (c) => (c === 1 ? 'decade' : 'decades'),\r\n      abbreviation: 'dec',\r\n      matches: ['dec', 'decade', 'decades'],\r\n    },\r\n    {\r\n      key: 'c',\r\n      name: (c) => (c === 1 ? 'century' : 'centuries'),\r\n      abbreviation: 'c',\r\n      matches: ['c', 'century', 'centuries', 'hundred years'],\r\n    },\r\n    {\r\n      key: 'kyr',\r\n      name: (c) => (c === 1 ? 'millennium' : 'millennia'),\r\n      abbreviation: 'kyr',\r\n      matches: ['kyr', 'millennium', 'millenniums', 'thousand years'],\r\n    },\r\n  ],\r\n} satisfies Language;\r\n","import type { Language } from '../languages';\r\n\r\nexport default {\r\n  decimal: '.',\r\n  and: 'me te',\r\n\r\n  units: [\r\n    {\r\n      key: 'ns',\r\n      name: 'hēkona nanomiri',\r\n      matches: [\r\n        'hēkona nanomiri',\r\n        'hēkonananomiri',\r\n        'hekona nanomiri',\r\n        'hekonananomiri',\r\n      ],\r\n    },\r\n    {\r\n      key: 'us',\r\n      name: 'hēkona miriona',\r\n      matches: [\r\n        'hēkona miriona',\r\n        'hēkonamiriona',\r\n        'hekona miriona',\r\n        'hekonamiriona',\r\n      ],\r\n    },\r\n    {\r\n      key: 'ms',\r\n      name: 'hēkona miri',\r\n      matches: ['hēkona miri', 'kākonamiri', 'hekona miri', 'hekonamiri'],\r\n    },\r\n    {\r\n      key: 's',\r\n      name: 'hēkona',\r\n      matches: ['hēkona', 'hekona'],\r\n    },\r\n    {\r\n      key: 'm',\r\n      name: 'meneti',\r\n      matches: ['meneti'],\r\n    },\r\n    {\r\n      key: 'h',\r\n      name: 'hāora',\r\n      matches: ['hāora', 'haora'],\r\n    },\r\n    {\r\n      key: 'd',\r\n      name: 'rā',\r\n      matches: ['rā', 'ra'],\r\n    },\r\n    {\r\n      key: 'w',\r\n      name: 'wiki',\r\n      matches: ['wiki'],\r\n    },\r\n    {\r\n      key: 'mo',\r\n      name: 'marama',\r\n      matches: ['marama'],\r\n    },\r\n    {\r\n      key: 'y',\r\n      name: 'tau',\r\n      matches: ['tau', 'houanga'],\r\n    },\r\n    {\r\n      key: 'dec',\r\n      name: 'tekau tau',\r\n      matches: ['tekautau', 'tekau tau'],\r\n    },\r\n    {\r\n      key: 'c',\r\n      name: 'rau tau',\r\n      matches: ['rautau', 'rau tau'],\r\n    },\r\n    {\r\n      key: 'kyr',\r\n      name: 'mano tau',\r\n      matches: ['manotau', 'mano tau'],\r\n    },\r\n  ],\r\n} satisfies Language;\r\n","import type { Language } from '../languages';\r\n\r\nfunction formatTime(value: number, unit: string): string {\r\n    const units = {\r\n        наносекунды: ['наносекунда', 'наносекунды', 'наносекунд'],\r\n        микросекунды: ['микросекунда', 'микросекунды', 'микросекунд'],\r\n        миллисекунды: ['миллисекунда', 'миллисекунды', 'миллисекунд'],\r\n        секунды: ['секунда', 'секунды', 'секунд'],\r\n        минуты: ['минута', 'минуты', 'минут'],\r\n        часы: ['час', 'часа', 'часов'],\r\n        дни: ['день', 'дня', 'дней'],\r\n        недели: ['неделя', 'недели', 'недель'],\r\n        месяцы: ['месяц', 'месяца', 'месяцев'],\r\n        годы: ['год', 'года', 'лет'],\r\n        десятилетия: ['десятилетие', 'десятилетия', 'десятилетий'],\r\n        века: ['век', 'века', 'веков'],\r\n        тысячелетия: ['тысячелетие', 'тысячелетия', 'тысячелетий'],\r\n    };\r\n\r\n    const words = units[unit as keyof typeof units];\r\n\r\n    const lastDigit = value % 10;\r\n    const lastTwoDigits = value % 100;\r\n\r\n    let word: string;\r\n    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {\r\n        word = words[2];\r\n    } else if (lastDigit === 1) {\r\n        word = words[0];\r\n    } else if (lastDigit >= 2 && lastDigit <= 4) {\r\n        word = words[1];\r\n    } else {\r\n        word = words[2];\r\n    }\r\n\r\n    return `${word}`;\r\n}\r\n\r\nexport default {\r\n    decimal: '.',\r\n    and: 'и',\r\n\r\n    units: [\r\n        {\r\n            key: 'ns',\r\n            name: (c: number) => formatTime(c, 'наносекунды'),\r\n            abbreviation: 'нс',\r\n            matches: ['нс', 'наносекунда', 'наносекунд', 'наносекунды'],\r\n        },\r\n        {\r\n            key: 'us',\r\n            name: (c: number) => formatTime(c, 'микросекунды'),\r\n            abbreviation: 'мкс',\r\n            matches: ['мкс', 'микросекунда', 'микросекунд', 'микросекунды'],\r\n        },\r\n        {\r\n            key: 'ms',\r\n            name: (c: number) => formatTime(c, 'миллисекунды'),\r\n            abbreviation: 'мс',\r\n            matches: ['мс', 'миллисекунда', 'миллисекунд', 'миллисекунды', 'мсек'],\r\n        },\r\n        {\r\n            key: 's',\r\n            name: (c: number) => formatTime(c, 'секунды'),\r\n            abbreviation: 'с',\r\n            matches: ['с', 'секунда', 'секунд', 'секунды', 'сек'],\r\n        },\r\n        {\r\n            key: 'm',\r\n            name: (c: number) => formatTime(c, 'минуты'),\r\n            abbreviation: 'м',\r\n            matches: ['м', 'минута', 'минуты', 'минут', 'мин'],\r\n        },\r\n        {\r\n            key: 'h',\r\n            name: (c: number) => formatTime(c, 'часы'),\r\n            abbreviation: 'ч',\r\n            matches: ['ч', 'час', 'часа', 'часов'],\r\n        },\r\n        {\r\n            key: 'd',\r\n            name: (c: number) => formatTime(c, 'дни'),\r\n            abbreviation: 'д',\r\n            matches: ['д', 'день', 'дня', 'дней'],\r\n        },\r\n        {\r\n            key: 'w',\r\n            name: (c: number) => formatTime(c, 'недели'),\r\n            abbreviation: 'н',\r\n            matches: ['н', 'неделя', 'недели', 'недель'],\r\n        },\r\n        {\r\n            key: 'mo',\r\n            name: (c: number) => formatTime(c, 'месяцы'),\r\n            abbreviation: 'мес',\r\n            matches: ['мес', 'месяц', 'месяца', 'месяцев'],\r\n        },\r\n        {\r\n            key: 'y',\r\n            name: (c: number) => formatTime(c, 'годы'),\r\n            abbreviation: 'г',\r\n            matches: ['г', 'год', 'года', 'лет', 'л'],\r\n        },\r\n        {\r\n            key: 'dec',\r\n            name: (c: number) => formatTime(c, 'десятилетия'),\r\n            abbreviation: 'дсл',\r\n            matches: ['десятилетие', 'десятилетия', 'десятилетий', 'десятков лет', 'десятка лет', 'десяток лет'],\r\n        },\r\n        {\r\n            key: 'c',\r\n            name: (c: number) => formatTime(c, 'века'),\r\n            abbreviation: 'вк',\r\n            matches: ['век', 'века', 'веков'],\r\n        },\r\n        {\r\n            key: 'kyr',\r\n            name: (c: number) => formatTime(c, 'тысячелетия'),\r\n            abbreviation: 'тыс',\r\n            matches: ['тыс', 'тысячелетие', 'тысячалетия', 'тысячалетий', 'тысяча лет', 'тысячи лет', 'тысяч лет'],\r\n        },\r\n    ],\r\n} satisfies Language;\r\n","import { MeasurementKey, measurements } from './measurements';\r\n\r\nimport de from './locales/de';\r\nimport en from './locales/en';\r\nimport mi from './locales/mi';\r\nimport ru from './locales/ru';\r\n\r\nexport const languages = { en, de, mi, ru };\r\nexport type LanguageKey = keyof typeof languages;\r\n/** Check if a value is a language key. */\r\nexport function isLanguageKey(value: unknown): value is LanguageKey {\r\n  return typeof value === 'string' && value in languages;\r\n}\r\n\r\nexport interface Language {\r\n  /** The version of 'and' in this language. */\r\n  and: string | ((words: string[]) => string);\r\n  /** The decimal separator this language uses. */\r\n  decimal: '.' | ',';\r\n  /** Measurement units. */\r\n  units: Unit[];\r\n}\r\n\r\nexport interface Unit {\r\n  /** Key to identify this unit. */\r\n  key: MeasurementKey;\r\n  /** Long form of the measurement. */\r\n  name: string | ((count: number) => string);\r\n  /** Short form of the measurement. */\r\n  abbreviation?: string | ((count: number) => string);\r\n  /** Strings used for the string regex. */\r\n  matches: string[];\r\n}\r\n\r\nexport interface LanguageOptions {\r\n  /** The key for the selected language. */\r\n  key: LanguageKey;\r\n  /** The version of 'and' in the language. */\r\n  andValue: string | ((words: string[]) => string);\r\n  /** The decimal separator the language uses. */\r\n  decimalSeparator: string;\r\n  /** The thousands separator the language uses. */\r\n  thousandsSeparator: string;\r\n  /** Whether the language has full short support. */\r\n  supportsAbbreviations: boolean;\r\n  /** The regex to match lengths of time. */\r\n  matcherRegex: RegExp;\r\n  /** The units and their names in the language, as a map. */\r\n  units: Record<string, Unit & { ms: number }>;\r\n}\r\n\r\nconst makeLanguageOptionsCache = new Map<LanguageKey, LanguageOptions>();\r\n\r\n/** Convert a language object into a object this module can utilities. */\r\nexport function makeLanguageOptions(key: LanguageKey): LanguageOptions {\r\n  const language = languages[key];\r\n  if (!language) throw new Error(`Language for key \"${key}\" not found`);\r\n\r\n  const andValue = language.and;\r\n  const decimalSeparator = language.decimal;\r\n  const thousandsSeparator = decimalSeparator === '.' ? ',' : '.';\r\n\r\n  const matcherRegex = new RegExp(\r\n    // biome-ignore lint/style/useTemplate: Better readability\r\n    '[-+*/]+|' + // Operators\r\n      '[()]|' + // Brackets\r\n      `(?![${decimalSeparator}${thousandsSeparator}])` + // Don't match single .,\r\n      `[\\\\d${decimalSeparator}${thousandsSeparator}]+|` + // Numbers\r\n      '(?<=\\\\s|\\\\d)(' + // Units\r\n      language.units\r\n        .flatMap(({ matches }) => matches)\r\n        .sort((a, b) => b.length - a.length)\r\n        .join('|') +\r\n      ')',\r\n    'gi',\r\n  );\r\n\r\n  // Turn the units array into a map where every key is a match\r\n  // This saves having to 'find' a match manually\r\n  // `units.find(u => u.matches.includes(value))` vs `units[value]`\r\n  const units = language.units.reduce<LanguageOptions['units']>((all, cur) => {\r\n    for (const match of [...cur.matches, cur.key])\r\n      all[match] = Object.assign(cur, { ms: measurements[cur.key] });\r\n    return all;\r\n  }, {});\r\n\r\n  return {\r\n    key,\r\n    decimalSeparator,\r\n    thousandsSeparator,\r\n    supportsAbbreviations: language.units //\r\n      .every((unit) => 'abbreviation' in unit),\r\n    andValue,\r\n    matcherRegex,\r\n    units,\r\n  };\r\n}\r\n\r\n/** Get the language options for a language. */\r\nexport function getLanguageOptions(key: LanguageKey): LanguageOptions {\r\n  let options = makeLanguageOptionsCache.get(key);\r\n  if (!options) {\r\n    options = makeLanguageOptions(key);\r\n    makeLanguageOptionsCache.set(key, options);\r\n  }\r\n  return options;\r\n}\r\n\r\n/** The default language to use, in this case English. */\r\nexport const defaultLanguageOptions = makeLanguageOptions('en');\r\n","import { LanguageOptions, Unit, defaultLanguageOptions } from './languages';\r\nimport { measurements } from './measurements';\r\n\r\n/** Options to pass to the format function. */\r\nexport interface FormatOptions {\r\n  /** Include input in the output. */\r\n  includeMs?: boolean;\r\n  /** Include sub input in the output. */\r\n  includeSubMs?: boolean;\r\n  /** Insert commas in-between each unit. */\r\n  insertCommas?: boolean;\r\n  /** Round the result to the highest unit. */\r\n  roundUp?: boolean;\r\n  /** Use the short names of measurements. */\r\n  shortFormat?: boolean;\r\n}\r\nexport const defaultFormatOptions: FormatOptions = {\r\n  includeMs: false,\r\n  includeSubMs: false,\r\n  insertCommas: false,\r\n  shortFormat: false,\r\n  roundUp: false,\r\n};\r\n\r\n/**\r\n * Convert milliseconds to a human readable string.\r\n * @param input Number of milliseconds.\r\n * @param options Options for formatting.\r\n * @param language Language options.\r\n * @returns Either a human readable string or null if the input is less than 1 second\r\n * and `includeMs` and `includeSubMs` are both false.\r\n */\r\nexport function format(\r\n  input: number,\r\n  options: FormatOptions = defaultFormatOptions,\r\n  language: LanguageOptions = defaultLanguageOptions,\r\n) {\r\n  // Convert negative input to positive and store the sign\r\n  const isNegative = input < 0;\r\n  if (isNegative) input *= -1;\r\n  const resultPrefix = isNegative ? '-' : '';\r\n\r\n  // Early return if the input is less than 1 second and both includeMs and includeSubMs are false\r\n  if (!options.includeMs && !options.includeSubMs && input < 1_000) return null;\r\n\r\n  const parsedTime = parseTime(\r\n    input,\r\n    options.includeMs,\r\n    options.includeSubMs || options.roundUp,\r\n  );\r\n  const timeEntries: [string, number][] = [];\r\n  for (const key in parsedTime) {\r\n    const value = parsedTime[key]!;\r\n    if (value > 0) timeEntries.push([key, value]);\r\n  }\r\n  if (timeEntries.length === 0) return null;\r\n\r\n  const useShort = options.shortFormat && language.supportsAbbreviations;\r\n\r\n  if (options.roundUp) {\r\n    const highestUnit = language.units[timeEntries[0]![0]!]!;\r\n    let totalValue = timeEntries[0]![1]!;\r\n\r\n    for (let i = timeEntries.length - 2; i >= 0; i--) {\r\n      const [key, value] = timeEntries[i]!;\r\n      if (value * language.units[key]!.ms > 0) {\r\n        if (key === highestUnit.key) totalValue += 1;\r\n        else timeEntries[i]![1] += 1;\r\n      }\r\n    }\r\n\r\n    return addThousandsSeparators(\r\n      resultPrefix + formatResult(totalValue, highestUnit, useShort),\r\n      language.thousandsSeparator,\r\n      totalValue >= 1_000,\r\n    );\r\n  }\r\n\r\n  const timeStrings = timeEntries.map(([key, value]) => {\r\n    return formatResult(value, language.units[key]!, useShort);\r\n  });\r\n\r\n  const totalLength = timeStrings.length;\r\n  if (!useShort && totalLength > 1) {\r\n    timeStrings[totalLength - 1] = /*\r\n     */ `${language.andValue} ${timeStrings[totalLength - 1]!}`;\r\n  }\r\n\r\n  return addThousandsSeparators(\r\n    resultPrefix +\r\n      timeStrings.join(useShort || !options.insertCommas ? ' ' : ', '),\r\n    language.thousandsSeparator,\r\n    timeEntries.some(([_, value]) => value > 999),\r\n  );\r\n}\r\n\r\n// HELPERS\r\n\r\n/** Pluralise a unit */\r\nfunction pluraliseUnit(unit: Unit, count: number, useShort: boolean) {\r\n  const abbreviation =\r\n    typeof unit.abbreviation === 'function'\r\n      ? unit.abbreviation(Math.abs(count))\r\n      : unit.abbreviation;\r\n  const name =\r\n    typeof unit.name === 'function' ? unit.name(Math.abs(count)) : unit.name;\r\n  return useShort && abbreviation ? abbreviation : name;\r\n}\r\n\r\n/** Parse a time in milliseconds into an object of units. */\r\nfunction parseTime(\r\n  milliseconds: number,\r\n  includeMs = false,\r\n  includeSubMs = false,\r\n): Record<string, number> {\r\n  if (includeSubMs) includeMs = true;\r\n  const round = milliseconds > 0 ? Math.floor : Math.ceil;\r\n\r\n  return {\r\n    y: round(milliseconds / measurements.y),\r\n    d: round(milliseconds / measurements.d) % 365,\r\n    h: round(milliseconds / measurements.h) % 24,\r\n    m: round(milliseconds / measurements.m) % 60,\r\n    s: round(milliseconds / measurements.s) % 60,\r\n\r\n    ms: includeMs ? round(milliseconds) % 1_000 : -1,\r\n    us: includeSubMs ? round(milliseconds / measurements.us) % 1_000 : -1,\r\n    ns: includeSubMs ? round(milliseconds / measurements.ns) % 1_000 : -1,\r\n  };\r\n}\r\n\r\n/** Format a result. */\r\nfunction formatResult(amount: number, unit: Unit, useShort = false) {\r\n  return `${amount}${useShort ? '' : ' '}${pluraliseUnit(\r\n    unit,\r\n    amount,\r\n    useShort,\r\n  )}`;\r\n}\r\n\r\n/** Format the result to include thousands separators. */\r\nfunction addThousandsSeparators(\r\n  value: string,\r\n  separator: string,\r\n  needsSeparators: boolean,\r\n) {\r\n  if (!needsSeparators) return value;\r\n  // Using a regex is faster than Number#toLocaleString\r\n  return value.replaceAll(/\\B(?=(?:\\d{3})+(?!\\d))/g, separator);\r\n}\r\n","import { type LanguageOptions, defaultLanguageOptions } from './languages';\r\n\r\n// biome-ignore lint/suspicious/noEmptyInterface: No options yet\r\nexport interface ParseOptions {}\r\nexport const defaultParseOptions: ParseOptions = {};\r\n\r\n/**\r\n * Parse a human readable string into milliseconds.\r\n * @param input Timeframe string.\r\n * @param _options Options for parsing, not used yet.\r\n * @param language Language options.\r\n * @returns The number of milliseconds or null if the input is invalid.\r\n */\r\nexport function parse(\r\n  input: string,\r\n  _options: ParseOptions = defaultParseOptions,\r\n  language: LanguageOptions = defaultLanguageOptions,\r\n) {\r\n  // There are no time measurements in a string less than 2 characters\r\n  if (input.length <= 1) return null;\r\n\r\n  const foundMatches = input.match(language.matcherRegex);\r\n  if (!foundMatches || foundMatches.length === 0) return null;\r\n  const isNegative = foundMatches[0] === '-';\r\n  if (isNegative) foundMatches.shift();\r\n\r\n  const finalCode: string[] = [];\r\n  let valueBuffer = '';\r\n\r\n  for (let i = 0; i < foundMatches.length; i++) {\r\n    const [previous, current, next] = [\r\n      foundMatches[i - 1],\r\n      foundMatches[i]!,\r\n      foundMatches[i + 1],\r\n    ];\r\n\r\n    if (isOperator(current) || isBracket(current)) {\r\n      valueBuffer += current;\r\n    }\r\n    //\r\n    else if (/[\\d ,.]/.test(current)) {\r\n      if (previous && !isOperator(previous)) valueBuffer += '+';\r\n      if (next && next in language.units) valueBuffer += '(';\r\n\r\n      const hasThousands = current.includes(language.thousandsSeparator);\r\n      const hasDecimal = current.includes(language.decimalSeparator);\r\n\r\n      // Replace the thousands separator with nothing, and the decimal separator with a dot\r\n      if (hasThousands && hasDecimal) {\r\n        const [_thousands, decimal] = current.split(language.decimalSeparator);\r\n        const thousands = (_thousands ?? '') //\r\n          .replaceAll(language.thousandsSeparator, '');\r\n        valueBuffer += `${thousands}.${decimal}`;\r\n      } else if (hasThousands)\r\n        valueBuffer += current.replaceAll(language.thousandsSeparator, '');\r\n      else if (hasDecimal)\r\n        valueBuffer += current.replaceAll(language.decimalSeparator, '.');\r\n      else valueBuffer += current;\r\n    }\r\n    //\r\n    else {\r\n      const unit = language.units[current];\r\n      if (!unit) continue;\r\n\r\n      if (previous && !isOperator(previous)) valueBuffer += '*';\r\n      valueBuffer += String(unit.ms);\r\n      if (previous && /[\\d.]/.test(previous)) valueBuffer += ')';\r\n    }\r\n\r\n    if (valueBuffer.length > 0) {\r\n      finalCode.push(valueBuffer);\r\n      valueBuffer = '';\r\n    }\r\n  }\r\n\r\n  if (finalCode.length === 0) return null;\r\n  try {\r\n    const code = finalCode.join('');\r\n    const result = new Function(`return ${code}`)();\r\n    return isNegative ? -result : result;\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\n// HELPERS\r\n\r\n/** Check that a value is a operator string. */\r\nfunction isOperator(value: unknown): value is '-' | '*' | '/' | '+' {\r\n  return value === '-' || value === '+' || value === '*' || value === '/';\r\n}\r\n\r\n/** Check that a value is a bracket. */\r\nfunction isBracket(value: unknown): value is '(' | ')' {\r\n  return value === '(' || value === ')';\r\n}\r\n","import { type FormatOptions, defaultFormatOptions, format } from './format';\r\nimport {\r\n  type LanguageKey,\r\n  getLanguageOptions,\r\n  isLanguageKey,\r\n} from './languages';\r\nimport { type ParseOptions, defaultParseOptions, parse } from './parse';\r\n\r\n/**\r\n * Convert milliseconds to a human readable string.\r\n * @param input Number of milliseconds.\r\n * @param options Options for formatting.\r\n * @example\r\n * ms(13572468) // => '3 hours 46 minutes and 12 seconds'\r\n *\r\n * ms(13572468, { includeMs: true }) // => '3 hours 46 minutes 12 seconds and 468 milliseconds'\r\n * ms(13572.468, { includeSubMs: true }) // => '13 seconds 572 milliseconds and 468 microseconds'\r\n *\r\n * ms(13572468, { roundUp: true }) // => '4 hours'\r\n * ms(13572468, { shortFormat: true }) // => '3h 46m 12s'\r\n * ms(13572468, { insertCommas: true }) // => '3 hours, 46 minutes, and 12 seconds'\r\n */\r\nfunction ms(input: number, options?: FormatOptions): ReturnType<typeof format>;\r\n\r\n/**\r\n * Convert milliseconds to a human readable string.\r\n * @param input Number of milliseconds.\r\n * @param language Language key.\r\n * @param options Options for formatting.\r\n * @example\r\n * ms(13572468, 'mi') // => '3 hāora 46 meneti me te 12 hēkona'\r\n *\r\n * ms(13572468, 'mi', { includeMs: true }) // => '3 hāora 46 meneti 12 hēkona me te 468 hēkona miri'\r\n * ms(13572.468, 'mi', { includeSubMs: true }) // => '13 hēkona 572 hēkona miri me te 468 hēkona miriona'\r\n *\r\n * ms(13572468, 'mi', { roundUp: true }) // => '4 hāora'\r\n * ms(13572468, 'mi', { shortFormat: true }) // => '3 hāora 46 meneti me te 12 hēkona'\r\n * ms(13572468, 'mi', { insertCommas: true }) // => '3 hāora, 46 meneti, me te 12 hēkona'\r\n */\r\nfunction ms(\r\n  input: number,\r\n  language: LanguageKey,\r\n  options?: FormatOptions,\r\n): ReturnType<typeof format>;\r\n\r\n/**\r\n * Parse a human readable timeframe string to milliseconds.\r\n * @param input Timeframe string.\r\n * @param options Options for parsing.\r\n * @example\r\n * ms('2 seconds') // => 2000\r\n * ms('2 minutes and 30 seconds') // => 150000\r\n * ms('1.5 days and 1.5 hours') // => 135000000\r\n *\r\n * ms('2 hours - 30 minutes') // => 5400000\r\n * ms('1 day * 365') // => 31536000000\r\n * ms('1.5 days + 1.5 hours') // => 135000000\r\n *\r\n * ms('1 week - 3 days * 2') // => 86400000\r\n * ms('(1 week - 3 days) * 2') // => 691200000\r\n */\r\nfunction ms(input: string, options?: ParseOptions): ReturnType<typeof parse>;\r\n\r\n/**\r\n * Parse a human readable timeframe string to milliseconds.\r\n * @param input Timeframe string.\r\n * @param language Language key.\r\n * @param options Options for parsing.\r\n * @example\r\n * ms('2 hēkona') // => 2000\r\n * ms('2 meneti me te 30 hēkona') // => 150000\r\n * ms('1.5 ra me te 1.5 hāora') // => 135000000\r\n *\r\n * ms('2 hāora - 30 meneti') // => 5400000\r\n * ms('1 rangi * 365') // => 31536000000\r\n * ms('1.5 ra + 1.5 hāora') // => 135000000\r\n *\r\n * ms('1 wiki - 3 ra * 2') // => 86400000\r\n * ms('(1 wiki - 3 ra) * 2') // => 691200000\r\n */\r\nfunction ms(\r\n  input: string,\r\n  language: LanguageKey,\r\n  options?: ParseOptions,\r\n): ReturnType<typeof parse>;\r\n\r\n/**\r\n * Create a new instance with a new default language.\r\n * @param language Language key.\r\n * @example\r\n * const ms = require('enhanced-ms')('mi');\r\n * ms(2000) // => '2 hēkona'\r\n * @example\r\n * const ms = require('enhanced-ms');\r\n * ms(2000) // => '2 seconds'\r\n * const newMs = ms('mi');\r\n * newMs(2000) // => '2 hēkona'\r\n */\r\nfunction ms(language: LanguageKey): typeof ms;\r\n\r\n/**\r\n * Create a new instance with new default options.\r\n * @param options Options for parsing and formatting.\r\n * @example\r\n * const ms = require('enhanced-ms')({ roundUp: true });\r\n * ms(13572468) // => '4 hours'\r\n * @example\r\n * const ms = require('enhanced-ms');\r\n * ms(13572468) // => '3 hours 46 minutes and 12 seconds'\r\n * const newMs = ms({ roundUp: true });\r\n * newMs(13572468) // => '4 hours'\r\n */\r\nfunction ms(options: FormatOptions & ParseOptions): typeof ms;\r\n\r\nfunction ms(\r\n  ...upperArgs: [\r\n    arg0: number | string | LanguageKey | (FormatOptions & ParseOptions),\r\n    arg1?: LanguageKey | (FormatOptions | ParseOptions),\r\n    arg2?: FormatOptions | ParseOptions,\r\n  ]\r\n) {\r\n  // Move the options to the end\r\n  if (typeof upperArgs[1] === 'object')\r\n    (upperArgs[2] = upperArgs[1]), (upperArgs[1] = undefined);\r\n\r\n  const hasDefaultLanguage = isLanguageKey(upperArgs[0]);\r\n  const hasDefaultOptions = typeof upperArgs[0] === 'object';\r\n\r\n  if (hasDefaultLanguage || hasDefaultOptions) {\r\n    // Create a new instance with the new default language or options\r\n    return ((...lowerArgs: unknown[]) => {\r\n      // Move the options to the end\r\n      if (typeof lowerArgs[1] === 'object')\r\n        (lowerArgs[2] = lowerArgs[1]), (lowerArgs[1] = undefined);\r\n\r\n      // Apply the default language only if no language was provided\r\n      if (!lowerArgs[1] && hasDefaultLanguage) lowerArgs[1] = upperArgs[0];\r\n\r\n      // Merge the default options with the provided options\r\n      lowerArgs[2] = mergeOptions(\r\n        hasDefaultOptions ? upperArgs[0] : {},\r\n        upperArgs[2] ?? {},\r\n        lowerArgs[2] ?? {},\r\n      );\r\n\r\n      return ms(...(lowerArgs as Parameters<typeof ms>));\r\n    }) as typeof ms;\r\n  }\r\n\r\n  const input = upperArgs[0] as string | number;\r\n  const languageOptions = getLanguageOptions(upperArgs[1] ?? 'en');\r\n  const resolvedOptions = formatOptions(upperArgs[2] ?? {});\r\n\r\n  if (typeof input === 'number') {\r\n    if (Number.isNaN(input) || !Number.isFinite(input))\r\n      throw new TypeError('Expected a finite number');\r\n    return format(input, resolvedOptions, languageOptions);\r\n  } else if (typeof input === 'string') {\r\n    return parse(input, resolvedOptions, languageOptions);\r\n  }\r\n\r\n  throw new TypeError('Expected a string or number');\r\n}\r\n\r\nexport default Object.assign(ms, { format, parse });\r\nexport type { FormatOptions, ParseOptions };\r\n\r\n// HELPERS\r\n\r\nfunction mergeOptions(...options: (FormatOptions | ParseOptions)[]) {\r\n  if (options.length <= 1) return options[0] ?? {};\r\n  return options.reduce((mergedOptions, options) => {\r\n    return Object.assign(mergedOptions, options);\r\n  }, {});\r\n}\r\n\r\nfunction formatOptions(\r\n  defaultOptions: FormatOptions & ParseOptions,\r\n  passOptions?: FormatOptions & ParseOptions,\r\n) {\r\n  return {\r\n    ...defaultFormatOptions,\r\n    ...defaultParseOptions,\r\n    ...defaultOptions,\r\n    ...passOptions,\r\n  };\r\n}\r\n"]}